openapi: 3.0.0
info:
  title: Wine API
  version: 1.0.0
paths:
  /api/v1/auth/login:
    post:
      summary: Log in
      requestBody:
        description: ID Token returned by Google
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idToken:
                  type: string
                  example: "ID Token returned by Google"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT Token containing user data including Google ID
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired token."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

  /api/v1/wines:
    post:
      summary: Add a new wine manually
      requestBody:
        description: Data of the wine to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wine'  # Reference to the Wine schema
      responses:
        '201':
          description: Wine added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wine'  # Return the added Wine schema
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired token."

    get:
      summary: Get a list of wines (optional filter by color)
      parameters:
        - name: color
          in: query
          description: Filter by wine color
          required: false
          schema:
            type: string
            example: "Red"
      responses:
        '200':
          description: List of wines returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wine'  # Reference to the Wine schema
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired token."

  /api/v1/wines/barcode:
    post:
      summary: Populate wine data by barcode
      requestBody:
        description: Barcode-based wine data population request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                barcode:
                  type: string
                  example: "123456789012"
      responses:
        '200':
          description: Wine data populated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wine'  # Return the populated Wine schema
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired token."

  /api/v1/wines/{id}:
    put:
      summary: Edit an existing wine
      parameters:
        - name: id
          description: Wine barcode
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated wine data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wine'
      responses:
        '200':
          description: Wine updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wine'  # Return the updated Wine schema
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired token."
        '404':
          description: Wine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Wine not found"

    delete:
      summary: Delete an existing wine
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Wine deleted successfully
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired token."
        '404':
          description: Wine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Wine not found"

  /api/v1/users:
    post:
      summary: Get or create a user
      requestBody:
        description: User identification data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                googleId:
                  type: string
                  example: "some-google-id"
      responses:
        '200':
          description: User information returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  googleId:
                    type: string
                    example: "some-google-id"
                  name:
                    type: string
                    example: "John Doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid user data."

components:
  schemas:
    Wine:
      type: object
      properties:
        producer:
          type: string
          example: "Cantina Sociale"
        wine_name:
          type: string
          example: "Chianti"
        vintage:
          type: integer
          example: 2018
        color:
          type: string
          description: Wine color (e.g. Red, White, Ros√©)
          example: "Red"
        production_area:
          type: string
          example: "Tuscany"
        image_path:
          type: string
          example: "/path/to/image"
        description:
          type: string
          example: "Wine with fruity flavors"
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 4
        price:
          type: number
          format: float
          example: 12.99
        barcode:
          type: string
          example: "123456789012"
